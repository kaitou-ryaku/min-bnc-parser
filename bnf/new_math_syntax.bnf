"STATEMENT                  : ( auto | EXPRESSION_STATEMENT | static )" "\n"
"EXPRESSION_STATEMENT       : ( @ | EXPRESSION ) semicolon" "\n"

"CONSTANT_EXPRESSION        : CONDITIONAL_EXPRESSION" "\n"
"CONDITIONAL_EXPRESSION     : ( LOGICAL_OR_EXPRESSION | LOGICAL_OR_EXPRESSION question EXPRESSION colon CONDITIONAL_EXPRESSION )" "\n"
"LOGICAL_OR_EXPRESSION      : LOGICAL_AND_EXPRESSION ( pipe_pipe LOGICAL_AND_EXPRESSION ) *" "\n"
"LOGICAL_AND_EXPRESSION     : INCLUSIVE_OR_EXPRESSION ( ampasand_ampasand INCLUSIVE_OR_EXPRESSION ) *" "\n"
"INCLUSIVE_OR_EXPRESSION    : EXCLUSIVE_OR_EXPRESSION ( pipe EXCLUSIVE_OR_EXPRESSION ) *" "\n"
"EXCLUSIVE_OR_EXPRESSION    : AND_EXPRESSION ( hat AND_EXPRESSION ) *" "\n"
"AND_EXPRESSION             : EQUALITY_EXPRESSION ( ampasand_ampasand EQUALITY_EXPRESSION ) *" "\n"
"EQUALITY_EXPRESSION        : RELATIONAL_EXPRESSION ( equal_equal RELATIONAL_EXPRESSION | exclamation_equal RELATIONAL_EXPRESSION ) *" "\n"
"RELATIONAL_EXPRESSION      : SHIFT_EXPRESSION ( langle SHIFT_EXPRESSION | rangle SHIFT_EXPRESSION | langle_equal SHIFT_EXPRESSION | rangle_equal SHIFT_EXPRESSION ) *" "\n"
"SHIFT_EXPRESSION           : ADDITIVE_EXPRESSION ( langle_langle ADDITIVE_EXPRESSION | rangle_rangle ADDITIVE_EXPRESSION ) *" "\n"
"ADDITIVE_EXPRESSION        : MULTIPLICATIVE_EXPRESSION ( plus MULTIPLICATIVE_EXPRESSION | minus MULTIPLICATIVE_EXPRESSION ) *" "\n"
"MULTIPLICATIVE_EXPRESSION  : CAST_EXPRESSION ( star CAST_EXPRESSION | slash CAST_EXPRESSION | percent CAST_EXPRESSION ) *" "\n"
"CAST_EXPRESSION            : ( UNARY_EXPRESSION | lparen int rparen CAST_EXPRESSION )" "\n"
"UNARY_EXPRESSION           : ( POSTFIX_EXPRESSION | plus_plus UNARY_EXPRESSION | minus_minus UNARY_EXPRESSION | UNARY_OPERATOR CAST_EXPRESSION | sizeof UNARY_EXPRESSION | sizeof int )" "\n"
"POSTFIX_EXPRESSION         : PRIMARY_EXPRESSION ( lbrace EXPRESSION rbrace | lparen ASSIGNMENT_EXPRESSION * rparen | dot identifier | minus_rangle identifier | plus_plus | minus_minus ) *" "\n"
"PRIMARY_EXPRESSION         : ( identifier | CONSTANT | string | lparen EXPRESSION rparen )" "\n"
"CONSTANT                   : ( integer_constant | character_constant | floating_constant | enumeration_constant )" "\n"
"EXPRESSION                 : ASSIGNMENT_EXPRESSION ( comma ASSIGNMENT_EXPRESSION ) *" "\n"
"ASSIGNMENT_EXPRESSION      : ( CONDITIONAL_EXPRESSION | UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION )" "\n"
"ASSIGNMENT_OPERATOR        : ( equal | star_equal | slash_equal | percent_equal | plus_equal | minus_equal | langle_langle_equal | rangle_rangle_equal | ampasand_equal | hat_equal | pipe_equal )" "\n"
"UNARY_OPERATOR             : ( ampasand | star | plus | minus | tilda | exclamation )" "\n"
